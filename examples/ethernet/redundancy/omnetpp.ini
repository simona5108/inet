[General]
network = EthernetRedundancyExample

# visualizer
*.visualizer.infoVisualizer.modules = "*.source.app[0].source or *.destination.app[0]"

# source
*.source.numApps = 1
*.source.app[0].typename = "UdpApp"
*.source.app[0].io.destAddress = "destination"
*.source.app[0].io.destPort = 1000
*.source.app[0].source.displayStringTextFormat = "sent %p pk (%l)"
*.source.app[0].source.packetLength = 1200B
*.source.app[0].source.productionInterval = truncnormal(100us,50us)

# destination
*.destination.numApps = 1
*.destination.app[0].typename = "UdpSink"
*.destination.app[0].localPort = 1000

# avoid ARP
*.*.ipv4.arp.typename = "GlobalArp"

# Ethernet
*.*.encap.typename = "OmittedEthernetEncapsulation"
*.*.ethernet.typename = "EthernetLayer"
*.*.ieee8021q.typename = "Ieee8021qLayer"

*.*.eth[*].typename = "LayeredEthernetInterface"
*.*.eth[*].bitrate = 100Mbps

# seamless stream redundancy configuration

# always use 802.1R protocol for egress traffic on this network interface
*.source.eth[0].protocol = "ieee8021rtag"
# enable stream policing in layer 2
*.source.ieee8021r.typename = "Ieee8021rLayer"
# configure all egress traffic as part of stream s1, start sequence numbering
*.source.ieee8021r.policy.streamIdentifier.streamMappings = [{packet: "*", stream: "s1"}]
# encode egress stream s1 to VLAN 1
*.source.ieee8021r.policy.streamEncoder.streamNameToVlanIdMapping = {s1: 1}

# map destination MAC address and VLAN pairs to network interfaces
*.s1.macTable.addressTable = [{address: "destination", vlan: 1, interface: "eth0"}, \
                              {address: "destination", vlan: 2, interface: "eth1"}]
# always use 802.1R protocol for egress traffic on all network interfaces
*.s1.eth[*].protocol = "ieee8021rtag"
# allow ingress traffic from VLAN 1
*.s1.ieee8021q.qTagHeaderChecker.vlanIdFilter = "1"
# enable stream policing in layer 2 briding
*.s1.bridging.streamPolicy.typename = "StreamLayer"
# map eth2 VLAN 1 to stream s1
*.s1.bridging.streamPolicy.streamDecoder.streamMappings = [{interface: "eth2", vlan: 1, stream: "s1"}]
# eliminate duplicates from stream s1
*.s1.bridging.streamPolicy.streamMerger.streamMapping = {s1: "s1"}
# split stream s1 into s2a and s2b
*.s1.bridging.streamPolicy.streamSplitter.streamMapping = {s1: ["s2a", "s2b"]}
# map stream s2a to VLAN 1 and s2b to VLAN 2
*.s1.bridging.streamPolicy.streamEncoder.streamNameToVlanIdMapping = {s2a: 1, s2b: 2}

# map destination MAC address and VLAN pairs to network interfaces
*.s2a.macTable.addressTable = [{address: "destination", vlan: 1, interface: "eth0"}, \
                               {address: "destination", vlan: 2, interface: "eth1"}]
# always use 802.1R protocol for egress traffic on all network interfaces
*.s2a.eth[*].protocol = "ieee8021rtag"
# allow ingress traffic from VLAN 1 and 2
*.s2a.ieee8021q.qTagHeaderChecker.vlanIdFilter = "1 2"
# enable stream policing in layer 2 briding
*.s2a.bridging.streamPolicy.typename = "StreamLayer"
# map eth2 VLAN 1 to stream s2a and eth1 VLAN 2 to stream s2b-s2a
*.s2a.bridging.streamPolicy.streamDecoder.streamMappings = [{interface: "eth2", vlan: 1, stream: "s2a"}, \
                                                            {interface: "eth1", vlan: 2, stream: "s2b-s2a"}]
# merge streams s2a and s2b-s2a in into s3a
*.s2a.bridging.streamPolicy.streamMerger.streamMapping = {s2a: "s3a", "s2b-s2a": "s3a"}
# split stream s2a into s3a and s2b
*.s2a.bridging.streamPolicy.streamSplitter.streamMapping = {s3a: ["s3a", "s2b"]}
# map stream s3a to VLAN 1 and s2b to VLAN 2
*.s2a.bridging.streamPolicy.streamEncoder.streamNameToVlanIdMapping = {s3a: 1, s2b: 2}

# map destination MAC address and VLAN pairs to network interfaces
*.s2b.macTable.addressTable = [{address: "destination", vlan: 1, interface: "eth0"}, \
                               {address: "destination", vlan: 2, interface: "eth1"}]
# always use 802.1R protocol for egress traffic on all network interfaces
*.s2b.eth[*].protocol = "ieee8021rtag"
# allow ingress traffic from VLAN 1 and 2
*.s2b.ieee8021q.qTagHeaderChecker.vlanIdFilter = "1 2"
# enable stream policing in layer 2 bridging
*.s2b.bridging.streamPolicy.typename = "StreamLayer"
# map eth2 VLAN 2 to stream s2b and eth1 VLAN 1 to stream s2a-s2b
*.s2b.bridging.streamPolicy.streamDecoder.streamMappings = [{interface: "eth2", vlan: 2, stream: "s2b"}, \
                                                            {interface: "eth1", vlan: 2, stream: "s2a-s2b"}]
# merge streams s2b and s2a-s2b in into s3b
*.s2b.bridging.streamPolicy.streamMerger.streamMapping = {s2b: "s3b", "s2a-s2b": "s3b"}
# split stream s2b into s3b and s2a
*.s2b.bridging.streamPolicy.streamSplitter.streamMapping = {s3b: ["s3b", "s2a"]}
# stream s3a maps to VLAN 1 and s2a to VLAN 2
*.s2b.bridging.streamPolicy.streamEncoder.streamNameToVlanIdMapping = {s3b: 1, s2a: 2}

# map destination MAC address and VLAN pairs to network interfaces
*.s3a.macTable.addressTable = [{address: "destination", vlan: 1, interface: "eth0"}]
# allow ingress traffic from VLAN 1
*.s3a.ieee8021q.qTagHeaderChecker.vlanIdFilter = "1"
# always use 802.1R protocol for egress traffic on all network interfaces
*.s3a.eth[*].protocol = "ieee8021rtag"

# map destination MAC address and VLAN pairs to network interfaces
*.s3b.macTable.addressTable = [{address: "destination", vlan: 1, interface: "eth0"}]
# allow ingress traffic from VLAN 1
*.s3b.ieee8021q.qTagHeaderChecker.vlanIdFilter = "1"
# always use 802.1R protocol for egress traffic on all network interfaces
*.s3b.eth[*].protocol = "ieee8021rtag"

# all interfaces must have the same address to accept packets from all streams
*.destination.eth[*].address = "0A-AA-12-34-56-78"
# enable stream policing in layer 2
*.destination.ieee8021r.typename = "Ieee8021rLayer"
# allow ingress traffic from VLAN 1
*.destination.ieee8021q.qTagHeaderChecker.vlanIdFilter = "1"
# map eth0 VLAN 1 to stream s3a and eth1 VLAN 1 to stream s3b
*.destination.ieee8021r.policy.streamDecoder.streamMappings = [{interface: "eth0", vlan: 1, stream: "s3a"}, \
                                                               {interface: "eth1", vlan: 1, stream: "s3b"}]
# merge streams s3a and s3b into null stream
*.destination.ieee8021r.policy.streamMerger.streamMapping = {s3a: "", s3b: ""}
